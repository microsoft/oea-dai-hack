{
	"name": "Intune_Processor",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p1sm",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 4,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "4",
				"spark.dynamicAllocation.maxExecutors": "4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/7b9a4896-4541-483f-bdc7-d8f4ec6be3ee/resourceGroups/rg-oea-daihackathon/providers/Microsoft.Synapse/workspaces/syn-oea-daihackathon/bigDataPools/spark3p1sm",
				"name": "spark3p1sm",
				"type": "Spark",
				"endpoint": "https://syn-oea-daihackathon.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p1sm",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run /OEA_py"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /example_modules_py"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"class IntuneModule(BaseOEAModule):\r\n",
					"    # Defines the intune data processing module.\r\n",
					"    def __init__(self, oea, source_folder='m365'):\r\n",
					"\r\n",
					"        BaseOEAModule.__init__(self, oea, source_folder)\r\n",
					"        \r\n",
					"        self.stage1np_devices = self.stage1np + '/intune/devices'\r\n",
					"\r\n",
					"        self.schemas['Devices'] =   [['DeviceName', 'string', 'no-op'],\r\n",
					"                                    ['ManagedBy', 'string', 'no-op'],\r\n",
					"                                    ['Ownership', 'string', 'no-op'],\r\n",
					"                                    ['Compliance','string','no-op'],\r\n",
					"                                    ['OS', 'string', 'no-op'],\r\n",
					"                                    ['OSVersion', 'string', 'no-op'],\r\n",
					"                                    ['LastCheckIn', 'timestamp', 'no-op'],\r\n",
					"                                    ['PrimaryUserUPN', 'string', 'hash'],\r\n",
					"                                    ['DeviceID', 'string', 'hash']]\r\n",
					"\r\n",
					"    def process_devices_data_from_stage1(self):\r\n",
					"        logger.info(\"Processing intune reports data from: \" + self.stage1np)\r\n",
					"        spark_schema = self.oea.to_spark_schema(self.schemas['Devices'])\r\n",
					"        df = spark.read.csv(self.stage1np_devices + '/*.csv', header='true', schema=spark_schema)\r\n",
					"        df = df.dropDuplicates(['DeviceID'])\r\n",
					"        df.write.parquet(self.stage2np + '/Intunes/Devices/devices.parquet', mode='overwrite')\r\n",
					"\r\n",
					"    def process_devices_data_from_stage2(self):\r\n",
					"        spark_schema = self.oea.to_spark_schema(self.schemas['Devices'])\r\n",
					"        df = spark.read.parquet(self.stage2np + '/Intunes/Devices/*.parquet', header='true', schema=spark_schema)\r\n",
					"        #sqlContext.registerDataFrameAsTable(spark.read.format('parquet').load(oea.stage2np + '/m365/Intunes/*'), 'Devices')\r\n",
					"        #df = spark.sql(\"select DeviceID,PrimaryUserUPN,LastCheckIn,OSVersion,OS,Ownership,ManagedBy,DeviceName from Devices\")\r\n",
					"        df.write.format('parquet').mode('overwrite').save(self.stage2np + '/m365/Intunes/Devices')\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"oea = OEA()\r\n",
					"intune = IntuneModule(oea)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"intune.process_devices_data_from_stage1()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"intune.process_devices_data_from_stage2()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#intune.create_stage2_db('parquet')\r\n",
					"spark.sql('CREATE DATABASE if not exists s2_Intune')\r\n",
					"spark.sql(\"create table if not exists s2_Intune.devices using PARQUET location '\" + oea.stage2np + \"/m365/Intunes/Devices'\")\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}