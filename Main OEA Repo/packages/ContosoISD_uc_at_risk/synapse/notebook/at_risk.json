{
	"name": "at_risk",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark3p0smallc",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/7b9a4896-4541-483f-bdc7-d8f4ec6be3ee/resourceGroups/rg-oea-cisd3ggimpl1/providers/Microsoft.Synapse/workspaces/syn-oea-cisd3ggimpl1b/bigDataPools/spark3p0smallc",
				"name": "spark3p0smallc",
				"type": "Spark",
				"endpoint": "https://syn-oea-cisd3ggimpl1b.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p0smallc",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.0",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"%run /OEA_py"
				],
				"execution_count": 131
			},
			{
				"cell_type": "code",
				"source": [
					"oea = OEA('stoeacisd3ggimpl1', '2fc72a29-e1ee-4eb6-95eb-9346557a6d6d', 'salt123')\r\n",
					"\r\n",
					"# Set a seed value in Faker so it generates the same values every time it's run\r\n",
					"_fake = Faker('en_US')\r\n",
					"Faker.seed(1) \r\n",
					"\r\n",
					"####################################################################\r\n",
					"# Configure these settings to generate the amount of test data needed.\r\n",
					"_students_per_school = 2\r\n",
					"_classes_in_student_schedule = 6\r\n",
					"_students_per_section = 25\r\n",
					"####################################################################\r\n",
					"_section_id = 1\r\n",
					"_student_id = 1\r\n",
					"_course_id = 1\r\n",
					"_school_id = 1\r\n",
					"_term_id = 1\r\n",
					"\r\n",
					"SUBJECTS = ['Math - Algebra', 'Math - Geometry', 'English Language', 'History - World History', \r\n",
					"             'Science Biology', 'Health', 'Technology - Programming', 'Physical Education', 'Art', 'Music']\r\n",
					"SCHOOL_TYPES = ['Elementary', 'Middle', 'High']\r\n",
					"GRADES = [(0,'Kindergarten'), (1, 'First'),(2, 'Second'),(3, 'Third'),(4, 'Fourth'),(5, 'Fifth'),(6, 'Sixth'),(7, 'Seventh'),(8,'Eigth')]\r\n",
					"ACTIONS = [('ID','In-school Suspension'),('ES','Restorative Dialogue'),('RJ','Restorative Justice'),('EY','Expelled Remainder Of School/yr'),\r\n",
					"    ('As','Tcher/parent/student Conference'),('IS','In-school Detention'),('LD','Lunch Detention'),('PC','Parent Contact'),('EL','Expelled Less Than School Year'),\r\n",
					"    ('AC','Behavior/Attendance Contract'),('VB','Verbal Warning'),('SF','Suspension 5 Days Or Less'),('RS','Referral To Social Worker'),('SM','Suspension More Than Five Days'),\r\n",
					"    ('SS','Saturday School'),('AP','Admin/Prnt/Gurdn/Stu Conference'),('RF','Referral To Counseling'),('DB','Detention Before/after School'),('LP','Loss of Privileges'),\r\n",
					"    ('IA','In-school Alternative'),('Cn','Ref Police - No charges filed'),('EN','Expelled Into Next School Year')]\r\n",
					"\r\n",
					"ATTENDANCE_TYPES = [('V','Early Completion'),('5','Parent Request Opt Out Testing'),('A','Absent (unexcused)'),('F','Field Trip'),('C','Counselor'),('X','Excused Tardy'),('I','In School Detention'),('Q','Went Home Ill'),('O','Office'),('W','Weather'),\r\n",
					"    ('6','State or District Testing'),('N','Nurse/Infirmary'),('G','Early Release/Parent'),('H','Timeout to Home'),('Y','In a Facility'),('R','Runaway'),('P','Prearranged'),('S','Suspended'),('L','Tutored-District'),('D','Enrolled in Special Program'),\r\n",
					"    ('M','SPED ONLY in school no IEP Svcs'),('J','Teacher Excused'),('E','Excused Absence'),('T','Tardy (Unexcused)'),('Pr','Present'),('K','Social Worker'),('Z','In Detention Center (SCYSC)')]\r\n",
					"\r\n",
					"INVOLVEMENTS = [('A','Accomplice'),('W','Witness'),('V','Victim'),('P','Perpetrator'),('N','Not Applicable')]\r\n",
					"\r\n",
					"INCIDENTS = [('AA1','L1 Unexcused Absences'),('ALA','L2 Abusive Lang w/Staff'),('ALP','L1 Abusive Lang/Intim w/Student'),('APL','L3 Any Act Prohibit by F/S/L Law'),\r\n",
					"    ('ASR','L2 Altering Sch/Classrm Rcrds'),('AT3','L3 3rd Degree Assault  (by adult'),('CLM','L1 Classroom Misconduct'),('CLO','L2 Continual LEVEL I Infraction'),\r\n",
					"    ('CLT','L3 Continual LEVEL II Infraction'),('CP2','L2 Campus Misconduct'),('CPM','L1 Campus Misconduct'),('DEP','L3 Destruction/Sch/Emp Prop'),('DIS','L1 Dishonesty'),\r\n",
					"    ('DSP','L2 Defacing School Prop'),('FCD','L2 Fail Complete Disc Asignmt'),('FIG','L2 Fighting'),('HA3','L3 Harassment'),('HAR','L2 Harassment'),('IDH','L1 Inappropriate Dress/Hygiene'),\r\n",
					"    ('INS','L1 Insubordination'),('IS2','L2 Insubor/open/persist defiance'),('L1E','L1 Inappropriate/Prsnl Elect Dev'),('L2B','L2 Bullying'),('L2E','L2 Inappropriate/Prsnl Elect Dev'),\r\n",
					"    ('L2P','L2 Phys Mistreatment of Studnt'),('L2V','L2 Violation of AUA'),('L3A','L3 P/U of Alcohol'),('L3D','L3 P/U of Drug Paraphernalia'),('PSV','L2 P/D/S Sched 4 or 5 substances'),\r\n",
					"    ('PU4','L4 P/U Dangerous Weapon'),('PUT','L2 P/U of  Tobacco/Simulated'),('PUW','L2 Inadvertent  Pos(Stand )Weap'),('SV2','L2 Serious Violations at School'),('SV3','L3 Serious Violations at School'),\r\n",
					"    ('THE','L2 Theft'),('ULC','L2 Unauthorized Leaving Campus'),('ULM','L3 Unlawful U/P/D/S of Marijuana'),('UNA','L2 Unexcused Absences/Truancy'),('UNT','L1 Unexcused Tardiness'),('WF3','L3 Weapon/Facsimile (Standard)')]\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"def write_to_stage2np(df, entity_name, format='parquet'):\r\n",
					"    df.write.format(format).mode('overwrite').save(f\"{oea.stage2np}/uc_at_risk/\" + entity_name)\r\n",
					"\r\n",
					"#oea.write_dict_as_csv(spark.createDataFrame(ACTIONS, ('ActionID','Action')), 'Action')\r\n",
					"#write_to_stage2np(spark.createDataFrame(ATTENDANCE_TYPES, ('AttendanceTypeID','AttendanceType')), 'Attendance Types')\r\n",
					"#write_to_stage2np(spark.createDataFrame(INVOLVEMENTS, ('InvolvementID','Involvement')), 'Involvements')\r\n",
					"#write_to_stage2np(spark.createDataFrame(INCIDENTS, ('IncidentID','Incident')), 'Incidents')\r\n",
					""
				],
				"execution_count": 142
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Write out test data to stage1\r\n",
					"pdf = pd.DataFrame(ACTIONS)\r\n",
					"pdf.columns = ['ActionID', 'Action']\r\n",
					"mssparkutils.fs.put(f\"{oea.stage1np}/{_folder}/Actions.csv\", pdf.to_csv(index=False), True)\r\n",
					"\r\n",
					"pdf = pd.DataFrame(ATTENDANCE_TYPES)\r\n",
					"pdf.columns = ['AttendanceTypeID', 'Attendance Type']\r\n",
					"mssparkutils.fs.put(f\"{oea.stage1np}/{_folder}/AttendanceTypes.csv\", pdf.to_csv(index=False), True)\r\n",
					"\r\n",
					"pdf = pd.DataFrame(INVOLVEMENTS)\r\n",
					"pdf.columns = ['InvolvementCodeId', 'Involvement']\r\n",
					"mssparkutils.fs.put(f\"{oea.stage1np}/{_folder}/Involvements.csv\", pdf.to_csv(index=False), True)\r\n",
					"\r\n",
					"pdf = pd.DataFrame(INCIDENTS)\r\n",
					"pdf.columns = ['IncidentCodeID', 'Incident']\r\n",
					"mssparkutils.fs.put(f\"{oea.stage1np}/{_folder}/Incidents.csv\", pdf.to_csv(index=False), True)"
				],
				"execution_count": 145
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def generate_data(number_of_schools):\r\n",
					"    global _school_id\r\n",
					"    schools = []\r\n",
					"    for n in range(number_of_schools):\r\n",
					"        school_info, school_data = create_school(_school_id)\r\n",
					"        write_to_data_lake(school_data)\r\n",
					"        _school_id += 1\r\n",
					"        schools.append(school_info)\r\n",
					"\r\n",
					"    # Now write out the Schools table\r\n",
					"    df = spark.createDataFrame(pd.DataFrame(schools))\r\n",
					"    write_to_stage2np(df, 'Schools')\r\n",
					"\r\n",
					"def create_school(school_id):\r\n",
					"    school_info = {\r\n",
					"            'SchoolID':school_id,\r\n",
					"            'SchoolName':f\"{_fake.last_name()} {_fake.random_element(SCHOOL_TYPES)}\"\r\n",
					"            }\r\n",
					"    school_data = {}            \r\n",
					"    school_data['Students'] = create_students(school_id)\r\n",
					"    school_data['Courses'] = create_courses()\r\n",
					"    school_data['Terms'] = create_terms()\r\n",
					"    return school_info, school_data\r\n",
					"\r\n",
					"def strip_internal_attributes(dict_data):\r\n",
					"    print(dict_data)\r\n",
					"    #for key, value in dict_data:\r\n",
					"    #    if key.startswith('_'): dict_data.pop(key)\r\n",
					"    #return dict_data\r\n",
					"\r\n",
					"def write_to_data_lake(school_data, stage=oea.stage2np):\r\n",
					"    school_attributes = {}\r\n",
					"    for key, value in school_data.items():\r\n",
					"        pdf = pd.DataFrame(value)\r\n",
					"        write_to_stage2np(spark.createDataFrame(pdf), key)\r\n",
					"\r\n",
					"def create_students(school_id):\r\n",
					"  global _student_id\r\n",
					"  students = []\r\n",
					"  for n in range(_students_per_school):\r\n",
					"    students.append(create_user(school_id, _student_id, 'student'))\r\n",
					"    _student_id += 1\r\n",
					"  return students\r\n",
					"\r\n",
					"def create_user(school_id, user_id, user_type):\r\n",
					"  lname = _fake.last_name()\r\n",
					"  grade_num, grade = _fake.random_element(GRADES)   \r\n",
					"  gender = _fake.random_element(['Male', 'Female'])\r\n",
					"  if gender == 'Male': fname = _fake.first_name_male()\r\n",
					"  else: fname = _fake.first_name_female() \r\n",
					"\r\n",
					"  user = {\r\n",
					"      'StudentID': _student_id,\r\n",
					"      'StudentName': f\"{fname} {lname}\",\r\n",
					"      'Gender': gender,\r\n",
					"      'FederalRaceCategory': _fake.random_element(['Asian', 'Black', 'White', 'Hispanic', 'American Indian']),\r\n",
					"      'PrimaryLanguage': _fake.language_name(),\r\n",
					"      'GradeNumber': grade_num,\r\n",
					"      'Grade': grade,\r\n",
					"      'CumulativeGPA': '3.5',\r\n",
					"      'StartSchoolYear': '20210821',\r\n",
					"      'EndSchoolYear': '20220601'\r\n",
					"      }\r\n",
					"  return user\r\n",
					"\r\n",
					"def create_terms():\r\n",
					"  global _term_id\r\n",
					"  terms = []\r\n",
					"  terms.append({\r\n",
					"    'TermID' : _term_id,\r\n",
					"    'TermName' : 'Fall Semester',\r\n",
					"    'TermStartDate' : '9/1/2021',\r\n",
					"    'TermEndDate' : '12/22/2021',\r\n",
					"    })\r\n",
					"  _term_id += 1\r\n",
					"  terms.append({\r\n",
					"    'TermID' : _term_id,\r\n",
					"    'TermName' : 'Spring Semester',\r\n",
					"    'TermStartDate' : '1/21/2022',\r\n",
					"    'TermEndDate' : '5/30/2022',\r\n",
					"    })\r\n",
					"  _term_id += 1\r\n",
					"  return terms\r\n",
					"\r\n",
					"def create_courses():\r\n",
					"  global _course_id\r\n",
					"  courses = []\r\n",
					"  for subject in SUBJECTS:\r\n",
					"    courses.append({\r\n",
					"      'CourseID' : _course_id,\r\n",
					"      'CourseName' : subject,\r\n",
					"      'CourseCode' : subject\r\n",
					"      })\r\n",
					"    _course_id += 1\r\n",
					"  return courses\r\n",
					"\r\n",
					"def create_daily_attendance(school_id, students, start_date, end_date):\r\n",
					"    possible_periods_in_day = 6\r\n",
					"\r\n",
					"    daterange = pd.date_range(start_date, end_date)\r\n",
					"    attendance = []\r\n",
					"    for student in students:\r\n",
					"        for single_date in daterange:\r\n",
					"            tardies = _fake.random_element([0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,3,4,5,6])\r\n",
					"            unexcused_class_absences = _fake.random_element([0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,3])\r\n",
					"            excused_class_absences = _fake.random_element([0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,3])\r\n",
					"            unexcused_all_day = _fake.random_element([0,0,0,0,1])\r\n",
					"            if unexcused_all_day == 1: excused_all_day = 0\r\n",
					"            else: excused_all_day = _fake.random_element([0,0,0,0,1])\r\n",
					"            gpa = _fake.random_element([0.523, 0.423, 1.13, 2.63, 2.33, 3.33, 4.0])\r\n",
					"\r\n",
					"            attendance.append({\r\n",
					"                'SchoolID': school_id,\r\n",
					"                'AttendanceDate': single_date.strftime(\"%Y-%m-%d\"),\r\n",
					"                'StudentID': student['StudentID'],\r\n",
					"                'NumofPossiblePeriods': possible_periods_in_day,\r\n",
					"                'NumofTardies': tardies,\r\n",
					"                'NumofUnexcusedAbsent': unexcused_class_absences,\r\n",
					"                'NumofExcusedAbsent': excused_class_absences,\r\n",
					"                'UnexcusedAllDay': unexcused_all_day,\r\n",
					"                'ExcusedAllDay': excused_all_day,\r\n",
					"                'Cumulative GPA': gpa\r\n",
					"                }\r\n",
					"            )\r\n",
					"\r\n",
					"    return attendance\r\n",
					""
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"students = create_students(1)\r\n",
					"start_date = date(2021, 1, 1)\r\n",
					"end_date = date(2021, 1, 3)\r\n",
					"attendance = create_daily_attendance(1, students, start_date, end_date)\r\n",
					"#print(attendance)\r\n",
					"#pdf = pd.DataFrame(attendance)\r\n",
					"#spark.createDataFrame(pdf)\r\n",
					"#df.write.format(format).mode('overwrite').save(f\"{oea.stage2np}/uc_at_risk/\" + entity_name)\r\n",
					"\r\n",
					"oea.write_dict_as_csv(attendance, 'uc_at_risk', 'Attendance.csv')\r\n",
					"\r\n",
					""
				],
				"execution_count": 124
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"generate_data(2)"
				],
				"execution_count": 101
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# First version"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def create_schools(quantity):\r\n",
					"  global _school_id\r\n",
					"  schools = []\r\n",
					"  for n in range(quantity):\r\n",
					"    school = create_school(_school_id)\r\n",
					"    schools.append(school)\r\n",
					"    _school_id += 1\r\n",
					"  return schools\r\n",
					"\r\n",
					"def create_school(school_id):\r\n",
					"  global _term_id\r\n",
					"  school = {\r\n",
					"    'SchoolID':school_id,\r\n",
					"    'name':f\"{_fake.last_name()} {_fake.random_element(SCHOOL_TYPES)}\"\r\n",
					"    }\r\n",
					"\r\n",
					"  school['_students'] = create_students(school['SchoolID'])\r\n",
					"  school['_courses'] = create_courses()\r\n",
					"  school['_terms'] = create_terms()\r\n",
					"  #for term in school['_terms']:\r\n",
					"  #  create_sections(term, school['sourcedId'], school['_courses'])\r\n",
					"\r\n",
					"  return school\r\n",
					"\r\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def write_to_stage2np(df, entity_name, format='parquet'):\r\n",
					"    df.write.format(format).mode('overwrite').save(f\"{oea.stage2np}/uc_at_risk/\" + entity_name)\r\n",
					"\r\n",
					"def write_data(json_data, entity_name):\r\n",
					"    pdf = pd.DataFrame(json_data)\r\n",
					"    df = spark.createDataFrame(pdf)\r\n",
					"    write_to_stage2np(df, entity_name)\r\n",
					"\r\n",
					"terms = []\r\n",
					"courses = []\r\n",
					"schools = create_schools(2)\r\n",
					"for school in schools:\r\n",
					"    students = school.pop('_students')\r\n",
					"    save_entity(pd.DataFrame(students), 'Student')\r\n",
					"    terms.append(school.pop('_terms'))\r\n",
					"    courses.append(school.pop('_courses'))\r\n",
					"\r\n",
					"write_data(terms, 'Term')\r\n",
					"write_data(courses, 'Course')\r\n",
					"write_data(schools, 'School')\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"import pandas as pd\r\n",
					"\r\n",
					"students = create_students('1')\r\n",
					"pdf = pd.DataFrame(students)\r\n",
					"df = spark.createDataFrame(pdf)\r\n",
					"#display(df)\r\n",
					"df.write.format('parquet').mode('overwrite').save(f\"{oea.stage2np}/uc_at_risk/Student\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 42
			}
		]
	}
}